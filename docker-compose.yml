services:
  # Environment Services
  postgres:
    image: postgres:16-alpine
    container_name: humble_pg
    environment:
      POSTGRES_DB: heroes_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5434:5432'
    volumes:
      - pg_data:/var/lib/postgresql/data
    networks:
      - app_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  redis:
    image: redis:7.2-alpine
    container_name: humble_redis
    ports:
      - '6380:6379'
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    networks:
      - app_network

  backend:
    build: ./backend
    container_name: humble_backend
    ports:
      - '3000:3000'
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/heroes_db
      REDIS_HOST: redis
      REDIS_PORT: 6379
    volumes:
      - ./backend:/usr/src/app
      - /usr/src/app/node_modules  # Prevents overwriting node_modules
    depends_on:
      migrate:
        condition: service_completed_successfully
      redis:
        condition: service_started
    networks:
      - app_network
    restart: unless-stopped
    command: [ "sh", "-c", "npm install && npm run build && npm run start:dev" ]
    healthcheck:
      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:3000/health" ]
      interval: 30s
      timeout: 3s
      retries: 3
      start_period: 30s

  migrate:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: humble_migrate
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres:5432/heroes_db
    command: npx prisma migrate deploy --schema=./prisma/schema.prisma
    volumes:
      - ./backend/prisma:/usr/src/app/prisma
    networks:
      - app_network
    depends_on:
      postgres:
        condition: service_healthy

#  frontend:
#    build: ./frontend
#    container_name: humble_frontend
#    ports:
#      - '8080:80'
#    depends_on:
#      - backend
#    networks:
#      - app_network
#    restart: unless-stopped
#    healthcheck:
#      test: [ "CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:80/" ]
#      interval: 30s
#      timeout: 3s
#      retries: 3
#      start_period: 30s

  # Test Services
  postgres_test:
    profiles: ["test"]
    image: postgres:16-alpine
    container_name: humble_pg_test
    environment:
      POSTGRES_DB: test_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
    ports:
      - '5433:5432'
    tmpfs:
      - /var/lib/postgresql/data
    networks:
      - test_network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  backend-tests:
    profiles: [ "test" ]
    build:
      context: ./backend
      dockerfile: Dockerfile.test
    container_name: humble_backend_tests
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres_test:5432/test_db
      NODE_ENV: test
    volumes:
      - ./backend:/usr/src/app
    command: [
      "sh",
      "-c",
      "npx prisma generate && npm run test"
    ]
    networks:
      - test_network
    depends_on:
      postgres_test:
        condition: service_healthy
      migrate-test:
        condition: service_completed_successfully

  migrate-test:
    profiles: [ "test" ]
    build:
      context: ./backend
      dockerfile: Dockerfile
    environment:
      DATABASE_URL: postgres://postgres:postgres@postgres_test:5432/test_db
    command: npx prisma migrate dev --schema=./prisma/schema.prisma
    volumes:
      - ./backend/prisma:/usr/src/app/prisma  # Ensures Prisma migrations exist
    networks:
      - test_network
    depends_on:
      postgres_test:
        condition: service_healthy

networks:
  app_network:
  test_network:

volumes:
  pg_data:
  redis_data: